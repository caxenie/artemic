; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 939] for uVision
; commandline ArmCC [--debug -c --asm --interleave -oserial.o --depend=serial.d --device=DARMP --apcs=interwork -O0 -I"C:\Program Files\Keil\ARM\INC\Philips" --omf_browse=serial.crf serial.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  init_system PROC
;;;27        */
;;;28       PLL0CFG = 0x24;	 
000000  e3a00024          MOV      r0,#0x24
000004  e59f136c          LDR      r1,|L1.888|
000008  e5c10084          STRB     r0,[r1,#0x84]
;;;29     
;;;30       /* Pentru a asigura modificarea valorilor in registrle de control si
;;;31       configurare a buclei PLL se impune o secventa de feed a buclei PLL*/
;;;32       PLL0FEED = 0xAA;
00000c  e3a000aa          MOV      r0,#0xaa
000010  e5c1008c          STRB     r0,[r1,#0x8c]
;;;33       PLL0FEED = 0x55;
000014  e3a00055          MOV      r0,#0x55
000018  e5c1008c          STRB     r0,[r1,#0x8c]
;;;34       
;;;35        /* PLL Control Register 
;;;36       - registru utilizat pentru a modifica biti de control ai PLL
;;;37       - se activeaza PLL si se conecteaza MCU la frecventa de iesire PLL
;;;38       - PLL0 este utilizata pentru a genera CLK pt procesor, 
;;;39         PLL1 e dedicata USB
;;;40      ------------------------------------------------------------------------
;;;41       Valori biti :	 (PLL Enable) 
;;;42        PLLE --> 1 (bit 0)
;;;43       */
;;;44       PLL0CON = 0x01;
00001c  e3a00001          MOV      r0,#1
000020  e5c10080          STRB     r0,[r1,#0x80]
;;;45       /* secventa de feed a PLL */
;;;46       PLL0FEED = 0xAA;
000024  e3a000aa          MOV      r0,#0xaa
000028  e5c1008c          STRB     r0,[r1,#0x8c]
;;;47       PLL0FEED = 0x55;
00002c  e3a00055          MOV      r0,#0x55
000030  e5c1008c          STRB     r0,[r1,#0x8c]
;;;48     
;;;49       /* asteapta pana cand PLL este locked pe faza */
;;;50       while(!(PLL0STAT & 0x400));   
000034  e1a00000          MOV      r0,r0
                  |L1.56|
000038  e59f0338          LDR      r0,|L1.888|
00003c  e1d008b8          LDRH     r0,[r0,#0x88]
000040  e3100b01          TST      r0,#0x400
000044  0afffffb          BEQ      |L1.56|
;;;51     
;;;52       /* PLL connect
;;;53        Valori biti :
;;;54        PLLC --> 1 (bit 1)
;;;55       */
;;;56       PLL0CON = 0x03;
000048  e3a00003          MOV      r0,#3
00004c  e59f1324          LDR      r1,|L1.888|
000050  e5c10080          STRB     r0,[r1,#0x80]
;;;57       /* secventa de feed a PLL */
;;;58       PLL0FEED = 0xAA;
000054  e3a000aa          MOV      r0,#0xaa
000058  e5c1008c          STRB     r0,[r1,#0x8c]
;;;59       PLL0FEED = 0x55;
00005c  e3a00055          MOV      r0,#0x55
000060  e5c1008c          STRB     r0,[r1,#0x8c]
;;;60     
;;;61       /* numar de cicli de ceas de acces la memoria Flash */
;;;62       /* 4 CLK */
;;;63       MAMCR = 0x2;
000064  e3a00002          MOV      r0,#2
000068  e5c10000          STRB     r0,[r1,#0]
;;;64       MAMTIM = 0x4;
00006c  e3a00004          MOV      r0,#4
000070  e5c10004          STRB     r0,[r1,#4]
;;;65       /* divizor freceventa periferice */
;;;66       VPBDIV = 0x02; // PCLK = 30MHz
000074  e3a00002          MOV      r0,#2
000078  e5c10100          STRB     r0,[r1,#0x100]
;;;67     }
00007c  e12fff1e          BX       lr
;;;68     
                          ENDP

                  init_uart0 PROC
;;;75        */ 
;;;76        int div =  PCLK/(16*BAUD);	
000080  e3a000c3          MOV      r0,#0xc3
;;;77     
;;;78        /* Pin Function Select Register 0  - PINSEL0 
;;;79        are rolul de a controla functiile pinilor MCU
;;;80        - se activeaza liniile de TX si RX pentru uart0
;;;81        -----------------------------------------------
;;;82        Valori biti :
;;;83        P0.0 --> 01 (bit 1:0)
;;;84        P0.1 --> 01 (bit 3:2) 
;;;85        */
;;;86        PINSEL0 |= 0x5;
000084  e59f12f0          LDR      r1,|L1.892|
000088  e5911000          LDR      r1,[r1,#0]
00008c  e3811005          ORR      r1,r1,#5
000090  e59f22e4          LDR      r2,|L1.892|
000094  e5821000          STR      r1,[r2,#0]
;;;87     
;;;88        /* elibereaza FIFO urile */
;;;89        U0FCR=0x7;
000098  e3a01007          MOV      r1,#7
00009c  e1c22500          BIC      r2,r2,r0,LSL #10
0000a0  e5c21008          STRB     r1,[r2,#8]
;;;90        /* Line Control Register - U0LCR
;;;91        are rolul de a set aparametri de comunicatie pe uart
;;;92        - activeaza numarul de biti, paritate si biti de stop
;;;93        -----------------------------------------------------
;;;94        Valori biti : 
;;;95        Word Length Select            --> 11 (bit 1:0) 8bit char
;;;96        Stop bit Select               --> 0  (bit 2)   1 stop bit
;;;97        Parity Select                 --> 0  (bit 3)   Paritate dezactivata
;;;98        Divisor Latch Acces Bit(DLAB) --> 1 (bit 7) pentru a accesa 
;;;99        registrele latch divizor U0DLL, U0DLM */
;;;100       U0LCR = 0x83; 
0000a4  e3a01083          MOV      r1,#0x83
0000a8  e5c2100c          STRB     r1,[r2,#0xc]
;;;101    
;;;102       /* Generarea baudrateului dorit se realizeaza prin utilizarea
;;;103       registrelor latch divizoare U0DLL, U0DLM (16 bit LSB,MSB) */
;;;104    
;;;105       U0DLL = div & 0xFF;
0000ac  e1c21000          BIC      r1,r2,r0
0000b0  e5c10000          STRB     r0,[r1,#0]
;;;106       U0DLM = (div>>8); // 9600 Baud Rate 
0000b4  e1a01440          ASR      r1,r0,#8
0000b8  e5c21004          STRB     r1,[r2,#4]
;;;107    
;;;108       /* Pentru a accesa registrele U0RBR, U0THR (bufferele de date Rx/Tx)
;;;109       bitul DLAB trebuie resetat */
;;;110       U0LCR = 0x03;
0000bc  e3a01003          MOV      r1,#3
0000c0  e5c2100c          STRB     r1,[r2,#0xc]
;;;111    }
0000c4  e12fff1e          BX       lr
;;;112    
                          ENDP

                  init_uart1 PROC
;;;115    {
;;;116       int div =  PCLK/(16*BAUD);	
0000c8  e3a000c3          MOV      r0,#0xc3
;;;117       /* se activeaza liniile de TX si RX pentru uart0 */
;;;118       PINSEL0 |= 0x00050000;
0000cc  e59f12a8          LDR      r1,|L1.892|
0000d0  e5911000          LDR      r1,[r1,#0]
0000d4  e3811805          ORR      r1,r1,#0x50000
0000d8  e59f229c          LDR      r2,|L1.892|
0000dc  e5821000          STR      r1,[r2,#0]
;;;119       U1LCR = 0x83; 
0000e0  e3a01083          MOV      r1,#0x83
0000e4  e2422907          SUB      r2,r2,#0x1c000
0000e8  e5c2100c          STRB     r1,[r2,#0xc]
;;;120       U1DLL = div & 0xFF;
0000ec  e1c21000          BIC      r1,r2,r0
0000f0  e5c10000          STRB     r0,[r1,#0]
;;;121       U1DLM = (div>>8); 
0000f4  e1a01440          ASR      r1,r0,#8
0000f8  e5c21004          STRB     r1,[r2,#4]
;;;122       U1LCR = 0x03;
0000fc  e3a01003          MOV      r1,#3
000100  e5c2100c          STRB     r1,[r2,#0xc]
;;;123    }
000104  e12fff1e          BX       lr
;;;124    
                          ENDP

                  putchar_uart0 PROC
;;;126    /* Functie de scriere a unui carcater pe uart0 */
;;;127    int putchar_uart0 (int ch){
000108  e1a01000          MOV      r1,r0
;;;128    	 /* cat timp nu avem data in buffer asteapta */
;;;129    	 while(!(U0LSR & 0x20));
00010c  e1a00000          MOV      r0,r0
                  |L1.272|
000110  e59f0268          LDR      r0,|L1.896|
000114  e5d00014          LDRB     r0,[r0,#0x14]
000118  e3100020          TST      r0,#0x20
00011c  0afffffb          BEQ      |L1.272|
;;;130    	 /* altfel plaseaza in buffer caracterul de trimis */
;;;131    	 	return (U0THR = ch);
000120  e20100ff          AND      r0,r1,#0xff
000124  e59f2254          LDR      r2,|L1.896|
000128  e5c20000          STRB     r0,[r2,#0]
;;;132    }
00012c  e12fff1e          BX       lr
;;;133    
                          ENDP

                  puts_uart0 PROC
;;;135    void puts_uart0(char *ch)
;;;136    {
000130  e52de004          PUSH     {lr}
000134  e1a03000          MOV      r3,r0
;;;137       while(*ch){
000138  ea000001          B        |L1.324|
                  |L1.316|
;;;138    		putchar_uart0(*ch++);
00013c  e4d30001          LDRB     r0,[r3],#1
000140  ebfffffe          BL       putchar_uart0
                  |L1.324|
000144  e5d30000          LDRB     r0,[r3,#0]            ;137
000148  e3500000          CMP      r0,#0                 ;137
00014c  1afffffa          BNE      |L1.316|
;;;139       }
;;;140    }
000150  e49de004          POP      {lr}
000154  e12fff1e          BX       lr
;;;141    
                          ENDP

                  putchar_uart1 PROC
;;;142    /* Functie de scriere a unui caracter pe uart1 */
;;;143    int putchar_uart1 (int ch){
000158  e1a01000          MOV      r1,r0
;;;144    	 /* cat timp nu avem data in buffer asteapta */
;;;145    	 while(!(U1LSR & 0x20));
00015c  e1a00000          MOV      r0,r0
                  |L1.352|
000160  e59f021c          LDR      r0,|L1.900|
000164  e5d00014          LDRB     r0,[r0,#0x14]
000168  e3100020          TST      r0,#0x20
00016c  0afffffb          BEQ      |L1.352|
;;;146    	 /* altfel plaseaza in buffer caracterul de trimis */
;;;147    	 	return (U1THR = ch);
000170  e20100ff          AND      r0,r1,#0xff
000174  e59f2208          LDR      r2,|L1.900|
000178  e5c20000          STRB     r0,[r2,#0]
;;;148    }
00017c  e12fff1e          BX       lr
;;;149    
                          ENDP

                  puts_uart1 PROC
;;;151    void puts_uart1(char *ch)
;;;152    {
000180  e52de004          PUSH     {lr}
000184  e1a03000          MOV      r3,r0
;;;153       while(*ch){
000188  ea000001          B        |L1.404|
                  |L1.396|
;;;154    		putchar_uart1(*ch++);
00018c  e4d30001          LDRB     r0,[r3],#1
000190  ebfffffe          BL       putchar_uart1
                  |L1.404|
000194  e5d30000          LDRB     r0,[r3,#0]            ;153
000198  e3500000          CMP      r0,#0                 ;153
00019c  1afffffa          BNE      |L1.396|
;;;155       }
;;;156    }
0001a0  e49de004          POP      {lr}
0001a4  e12fff1e          BX       lr
;;;157    
                          ENDP

                  getchar_uart0 PROC
;;;160    	/* cat timp nu avem date in registrul de receptie U0RBR asteapta */
;;;161    	while(!(U0LSR & 0x01));
0001a8  e1a00000          MOV      r0,r0
                  |L1.428|
0001ac  e59f01cc          LDR      r0,|L1.896|
0001b0  e5d00014          LDRB     r0,[r0,#0x14]
0001b4  e3100001          TST      r0,#1
0001b8  0afffffb          BEQ      |L1.428|
;;;162    	/* cand avem date disponibile in buffer se preiau */
;;;163     	return (U0RBR);
0001bc  e59f01bc          LDR      r0,|L1.896|
0001c0  e5d00000          LDRB     r0,[r0,#0]
;;;164    }
0001c4  e12fff1e          BX       lr
;;;165    
                          ENDP

                  getchar_uart1 PROC
;;;169    	/* cat timp nu avem date in registrul de receptie U1RBR asteapta */
;;;170    	while(!(U1LSR & 0x01));
0001c8  e1a00000          MOV      r0,r0
                  |L1.460|
0001cc  e59f01b0          LDR      r0,|L1.900|
0001d0  e5d00014          LDRB     r0,[r0,#0x14]
0001d4  e3100001          TST      r0,#1
0001d8  0afffffb          BEQ      |L1.460|
;;;171    	/* cand avem date disponibile in buffer se preiau */
;;;172     	return (U1RBR);
0001dc  e59f01a0          LDR      r0,|L1.900|
0001e0  e5d00000          LDRB     r0,[r0,#0]
;;;173    }
0001e4  e12fff1e          BX       lr
;;;174    
                          ENDP

                  ascii_convert0 PROC
;;;178    {	
;;;179       hinib0=(ch&0xf0)>>4;
0001e8  e20010f0          AND      r1,r0,#0xf0
0001ec  e1a01241          ASR      r1,r1,#4
0001f0  e59f2190          LDR      r2,|L1.904|
0001f4  e5c21000          STRB     r1,[r2,#0]  ; hinib0
;;;180       lonib0=ch&0x0f;
0001f8  e200100f          AND      r1,r0,#0xf
0001fc  e59f2188          LDR      r2,|L1.908|
000200  e5c21000          STRB     r1,[r2,#0]  ; lonib0
;;;181       if(hinib0>9) hinib0=hinib0+'7';
000204  e59f117c          LDR      r1,|L1.904|
000208  e5d11000          LDRB     r1,[r1,#0]  ; hinib0
00020c  e3510009          CMP      r1,#9
000210  da000005          BLE      |L1.556|
000214  e59f116c          LDR      r1,|L1.904|
000218  e5d11000          LDRB     r1,[r1,#0]  ; hinib0
00021c  e2811037          ADD      r1,r1,#0x37
000220  e59f2160          LDR      r2,|L1.904|
000224  e5c21000          STRB     r1,[r2,#0]  ; hinib0
000228  ea000004          B        |L1.576|
                  |L1.556|
;;;182       else hinib0=hinib0+'0';
00022c  e59f1154          LDR      r1,|L1.904|
000230  e5d11000          LDRB     r1,[r1,#0]  ; hinib0
000234  e2811030          ADD      r1,r1,#0x30
000238  e59f2148          LDR      r2,|L1.904|
00023c  e5c21000          STRB     r1,[r2,#0]  ; hinib0
                  |L1.576|
;;;183       if(lonib0>9) lonib0=lonib0+'7';
000240  e59f1144          LDR      r1,|L1.908|
000244  e5d11000          LDRB     r1,[r1,#0]  ; lonib0
000248  e3510009          CMP      r1,#9
00024c  da000005          BLE      |L1.616|
000250  e59f1134          LDR      r1,|L1.908|
000254  e5d11000          LDRB     r1,[r1,#0]  ; lonib0
000258  e2811037          ADD      r1,r1,#0x37
00025c  e59f2128          LDR      r2,|L1.908|
000260  e5c21000          STRB     r1,[r2,#0]  ; lonib0
000264  ea000004          B        |L1.636|
                  |L1.616|
;;;184       else lonib0=lonib0+'0';
000268  e59f111c          LDR      r1,|L1.908|
00026c  e5d11000          LDRB     r1,[r1,#0]  ; lonib0
000270  e2811030          ADD      r1,r1,#0x30
000274  e59f2110          LDR      r2,|L1.908|
000278  e5c21000          STRB     r1,[r2,#0]  ; lonib0
                  |L1.636|
;;;185    
;;;186    }
00027c  e12fff1e          BX       lr
;;;187    
                          ENDP

                  ascii_convert1 PROC
;;;189    {	
;;;190       hinib1=(ch&0xf0)>>4;
000280  e20010f0          AND      r1,r0,#0xf0
000284  e1a01241          ASR      r1,r1,#4
000288  e59f2100          LDR      r2,|L1.912|
00028c  e5c21000          STRB     r1,[r2,#0]  ; hinib1
;;;191       lonib1=ch&0x0f;
000290  e200100f          AND      r1,r0,#0xf
000294  e59f20f8          LDR      r2,|L1.916|
000298  e5c21000          STRB     r1,[r2,#0]  ; lonib1
;;;192       if(hinib1>9) hinib1=hinib1+'7';
00029c  e59f10ec          LDR      r1,|L1.912|
0002a0  e5d11000          LDRB     r1,[r1,#0]  ; hinib1
0002a4  e3510009          CMP      r1,#9
0002a8  da000005          BLE      |L1.708|
0002ac  e59f10dc          LDR      r1,|L1.912|
0002b0  e5d11000          LDRB     r1,[r1,#0]  ; hinib1
0002b4  e2811037          ADD      r1,r1,#0x37
0002b8  e59f20d0          LDR      r2,|L1.912|
0002bc  e5c21000          STRB     r1,[r2,#0]  ; hinib1
0002c0  ea000004          B        |L1.728|
                  |L1.708|
;;;193       else hinib1=hinib1+'0';
0002c4  e59f10c4          LDR      r1,|L1.912|
0002c8  e5d11000          LDRB     r1,[r1,#0]  ; hinib1
0002cc  e2811030          ADD      r1,r1,#0x30
0002d0  e59f20b8          LDR      r2,|L1.912|
0002d4  e5c21000          STRB     r1,[r2,#0]  ; hinib1
                  |L1.728|
;;;194       if(lonib1>9) lonib1=lonib1+'7';
0002d8  e59f10b4          LDR      r1,|L1.916|
0002dc  e5d11000          LDRB     r1,[r1,#0]  ; lonib1
0002e0  e3510009          CMP      r1,#9
0002e4  da000005          BLE      |L1.768|
0002e8  e59f10a4          LDR      r1,|L1.916|
0002ec  e5d11000          LDRB     r1,[r1,#0]  ; lonib1
0002f0  e2811037          ADD      r1,r1,#0x37
0002f4  e59f2098          LDR      r2,|L1.916|
0002f8  e5c21000          STRB     r1,[r2,#0]  ; lonib1
0002fc  ea000004          B        |L1.788|
                  |L1.768|
;;;195       else lonib1=lonib1+'0';
000300  e59f108c          LDR      r1,|L1.916|
000304  e5d11000          LDRB     r1,[r1,#0]  ; lonib1
000308  e2811030          ADD      r1,r1,#0x30
00030c  e59f2080          LDR      r2,|L1.916|
000310  e5c21000          STRB     r1,[r2,#0]  ; lonib1
                  |L1.788|
;;;196    
;;;197    }
000314  e12fff1e          BX       lr
;;;198    
                          ENDP

                  uart0_send_ascii PROC
;;;200    void uart0_send_ascii(unsigned char ch)
;;;201    {
000318  e52de004          PUSH     {lr}
00031c  e1a03000          MOV      r3,r0
;;;202        ascii_convert0(ch);
000320  e1a00003          MOV      r0,r3
000324  ebfffffe          BL       ascii_convert0
;;;203        putchar_uart0(hinib0);
000328  e59f0058          LDR      r0,|L1.904|
00032c  e5d00000          LDRB     r0,[r0,#0]  ; hinib0
000330  ebfffffe          BL       putchar_uart0
;;;204        putchar_uart0(lonib0);
000334  e59f0050          LDR      r0,|L1.908|
000338  e5d00000          LDRB     r0,[r0,#0]  ; lonib0
00033c  ebfffffe          BL       putchar_uart0
;;;205        
;;;206    }
000340  e49de004          POP      {lr}
000344  e12fff1e          BX       lr
;;;207    void uart1_send_ascii(unsigned char ch)
                          ENDP

                  uart1_send_ascii PROC
;;;208    {
000348  e52de004          PUSH     {lr}
00034c  e1a03000          MOV      r3,r0
;;;209        ascii_convert1(ch);
000350  e1a00003          MOV      r0,r3
000354  ebfffffe          BL       ascii_convert1
;;;210        putchar_uart1(hinib1);
000358  e59f0030          LDR      r0,|L1.912|
00035c  e5d00000          LDRB     r0,[r0,#0]  ; hinib1
000360  ebfffffe          BL       putchar_uart1
;;;211        putchar_uart1(lonib1);
000364  e59f0028          LDR      r0,|L1.916|
000368  e5d00000          LDRB     r0,[r0,#0]  ; lonib1
00036c  ebfffffe          BL       putchar_uart1
;;;212    }
000370  e49de004          POP      {lr}
000374  e12fff1e          BX       lr
                          ENDP

                  |L1.888|
000378  e01fc000          DCD      0xe01fc000
                  |L1.892|
00037c  e002c000          DCD      0xe002c000
                  |L1.896|
000380  e000c000          DCD      0xe000c000
                  |L1.900|
000384  e0010000          DCD      0xe0010000
                  |L1.904|
000388  00000000          DCD      hinib0
                  |L1.908|
00038c  00000000          DCD      lonib0
                  |L1.912|
000390  00000000          DCD      hinib1
                  |L1.916|
000394  00000000          DCD      lonib1

                          AREA ||.data||, DATA, ALIGN=0

                  lonib0
000000  00                DCB      0x00
                  hinib0
000001  00                DCB      0x00
                  lonib1
000002  00                DCB      0x00
                  hinib1
000003  00                DCB      0x00
